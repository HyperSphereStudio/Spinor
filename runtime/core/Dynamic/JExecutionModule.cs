using System;using System.Collections.Generic;using System.IO;using System.Reflection;using System.Reflection.Emit;using runtime.core.Abstract;using runtime.parse;namespace runtime.core.Dynamic{    public class JExecutionModule : JRuntimeModule    {        private static readonly Dictionary<string, JExecutionModule> ExecutionModules = new();        internal string _Name;        internal ModuleBuilder _M;      //  internal JuliaStaticCompiler cmp;        public string Name => _Name;        public string FullName => _Name;        internal JExecutionModule(ModuleBuilder m, string name) : base(null, name) {            _M = m;            BaseModule = this;            _Name = name;        //    cmp = new(this);            ExecutionModules.Add(name, this);        }        public override bool IsDefined(Type attributeType, bool inherit) => _M.IsDefined(attributeType, inherit);        public static JExecutionModule GetExecutionModule(string name) {            if (ExecutionModules.TryGetValue(name, out JExecutionModule m))                return m;            return null;        }        internal static JExecutionModule CreateExecutionModule(string name) {            var asm = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(name + "Asm"), AssemblyBuilderAccess.Run);            JExecutionModule em = new(asm.DefineDynamicModule(name), name);            JModuleBuilder b = new JModuleBuilder(em, name);            //Create Root Module Handle For Execution In Evaluation Expressions            var modBuilder = b.CreateType(name, JStructType.__EModule__, null);            var modExpr = modBuilder.Builder.TypeInitializer;            Bootstrap.CreateExecutionModuleTypeHandle(modExpr, modBuilder.Builder, name);            em.SetInternalType(modBuilder.Create());                        return em;        }               // public JuliaExpression Compile(string expr) => cmp.Compile(new JuliappParser(expr));       // public JuliaExpression Compile(FileInfo info) => cmp.Compile(new JuliappParser(info));      //  public object Eval(string expr) => Compile(expr)();       // public object Eval(FileInfo file) => Compile(file)();    }}