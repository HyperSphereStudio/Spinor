using System;using System.Collections.Generic;using System.Reflection.Emit;using runtime.core.JIL;namespace runtime.core.Runtime;public sealed class JRootModule : JRuntimeModule{    private static readonly Dictionary<string, JRootModule> RootModules = new();    private readonly ModuleBuilder _m;    internal JRootModule(ModuleBuilder m, JILModule jm, JRuntimeContext ctx) : base(jm, ctx, null) {        _m = m;        iparent = this;        RootModules.Add(jm.Name, this);    }    public static JRootModule GetRootModule(string name) {        if (RootModules.TryGetValue(name, out JRootModule m))            return m;        return null;    }    internal static JRootModule CreateRootModule(string name) {        // var asm = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(name + "Asm"), AssemblyBuilderAccess.Run);        //asm.DefineDynamicModule(name)        var mods = new IJModule[1];        var tys = Array.Empty<IJType>();        var jrc = new JRuntimeContext(new[] { name }, mods, tys);        var jm = new JILModule(0, JModuleFlags.Bare, JExprFlags.None, Array.Empty<byte>(),             Array.Empty<JNameRef>(), Array.Empty<JILField>(), null);        jm._ctx = jrc;        JRootModule em = new(null, jm, jrc);        mods[0] = em;        jm.iparent = em;        return em;    }}