//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Julia.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HyperSphere {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class JuliaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Symbol=1, AbstractType=2, Using=3, Extend=4, Global=5, Const=6, Local=7, 
		Mutable=8, Function=9, Module=10, Struct=11, For=12, Goto=13, If=14, Else=15, 
		ElseIf=16, Return=17, Continue=18, Do=19, End=20, LeftParen=21, RightParen=22, 
		LeftBracket=23, RightBracket=24, LeftBrace=25, RightBrace=26, And=27, 
		Or=28, Caret=29, Not=30, Tilde=31, Plus=32, Minus=33, Star=34, Div=35, 
		Mod=36, LeftShift=37, RightShift=38, Operator=39, Less=40, LessEqual=41, 
		Greater=42, GreaterEqual=43, ComparisonOperator=44, ShortAnd=45, ShortOr=46, 
		ShortcutOperator=47, Question=48, Colon=49, ValueType=50, Semi=51, Comma=52, 
		Assign=53, Arrow=54, Dot=55, Splat=56, Termination=57, AugmentedAssignment=58, 
		Assignment=59, Constant=60, Identifier=61, IntegerConstant=62, DecimalConstant=63, 
		NewLine=64, Whitespace=65, BlockComment=66, LineComment=67;
	public const int
		RULE_script = 0, RULE_moduleExpr = 1, RULE_moduleVariableDeclaration = 2, 
		RULE_module = 3, RULE_moduleExprStatement = 4, RULE_usingModule = 5, RULE_moduleRef = 6, 
		RULE_moduleIdentifier = 7, RULE_symbolIdentifier = 8, RULE_abstractStructure = 9, 
		RULE_compositeStructure = 10, RULE_structure = 11, RULE_structField = 12, 
		RULE_structItem = 13, RULE_blockExpr = 14, RULE_blockExprStatement = 15, 
		RULE_blockVariableInstatiation = 16, RULE_blockArg = 17, RULE_blockVariableDeclaration = 18, 
		RULE_function = 19, RULE_functionHeader = 20, RULE_functionItem = 21, 
		RULE_functionCall = 22, RULE_shortFunction = 23, RULE_longFunction = 24, 
		RULE_tuple = 25, RULE_namedTuple = 26, RULE_typetuple = 27, RULE_tupleList = 28, 
		RULE_typeName = 29, RULE_parameterizedType = 30, RULE_type = 31, RULE_endExpr = 32;
	public static readonly string[] ruleNames = {
		"script", "moduleExpr", "moduleVariableDeclaration", "module", "moduleExprStatement", 
		"usingModule", "moduleRef", "moduleIdentifier", "symbolIdentifier", "abstractStructure", 
		"compositeStructure", "structure", "structField", "structItem", "blockExpr", 
		"blockExprStatement", "blockVariableInstatiation", "blockArg", "blockVariableDeclaration", 
		"function", "functionHeader", "functionItem", "functionCall", "shortFunction", 
		"longFunction", "tuple", "namedTuple", "typetuple", "tupleList", "typeName", 
		"parameterizedType", "type", "endExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'using'", "'<:'", "'global'", "'const'", "'local'", 
		"'mutable'", "'function'", "'module'", "'struct'", "'for'", "'goto'", 
		"'if'", "'else'", "'elseif'", "'return'", "'continue'", "'do'", "'end'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'&'", "'|'", "'^'", "'!'", 
		"'~'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<<'", "'>>'", null, "'<'", 
		"'<='", "'>'", "'>='", null, "'&&'", "'||'", null, "'?'", "':'", "'::'", 
		"';'", "','", "'='", "'->'", "'.'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Symbol", "AbstractType", "Using", "Extend", "Global", "Const", 
		"Local", "Mutable", "Function", "Module", "Struct", "For", "Goto", "If", 
		"Else", "ElseIf", "Return", "Continue", "Do", "End", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "And", "Or", 
		"Caret", "Not", "Tilde", "Plus", "Minus", "Star", "Div", "Mod", "LeftShift", 
		"RightShift", "Operator", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"ComparisonOperator", "ShortAnd", "ShortOr", "ShortcutOperator", "Question", 
		"Colon", "ValueType", "Semi", "Comma", "Assign", "Arrow", "Dot", "Splat", 
		"Termination", "AugmentedAssignment", "Assignment", "Constant", "Identifier", 
		"IntegerConstant", "DecimalConstant", "NewLine", "Whitespace", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Julia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JuliaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JuliaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JuliaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JuliaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExprContext moduleExpr() {
			return GetRuleContext<ModuleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExprStatementContext[] moduleExprStatement() {
			return GetRuleContexts<ModuleExprStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExprStatementContext moduleExprStatement(int i) {
			return GetRuleContext<ModuleExprStatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				{
				State = 66;
				Match(Eof);
				}
				break;
			case AbstractType:
			case Using:
			case Global:
			case Const:
			case Local:
			case Mutable:
			case Module:
			case Struct:
			case Termination:
			case Identifier:
				{
				{
				State = 73;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 67;
					moduleExpr();
					}
					break;
				case 2:
					{
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 68;
						moduleExprStatement();
						}
						}
						State = 71;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AbstractType) | (1L << Using) | (1L << Global) | (1L << Const) | (1L << Local) | (1L << Mutable) | (1L << Module) | (1L << Struct) | (1L << Termination) | (1L << Identifier))) != 0) );
					}
					break;
				}
				State = 75;
				Match(Eof);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureContext structure() {
			return GetRuleContext<StructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleVariableDeclarationContext moduleVariableDeclaration() {
			return GetRuleContext<ModuleVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingModuleContext usingModule() {
			return GetRuleContext<UsingModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination() { return GetToken(JuliaParser.Termination, 0); }
		public ModuleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterModuleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitModuleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExprContext moduleExpr() {
		ModuleExprContext _localctx = new ModuleExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_moduleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Termination) {
				{
				State = 79;
				Match(Termination);
				}
			}

			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 82;
				structure();
				}
				break;
			case 2:
				{
				State = 83;
				moduleVariableDeclaration();
				}
				break;
			case 3:
				{
				State = 84;
				module();
				}
				break;
			case 4:
				{
				State = 85;
				usingModule();
				}
				break;
			case 5:
				{
				State = 86;
				blockExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockArgContext blockArg() {
			return GetRuleContext<BlockArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JuliaParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(JuliaParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockVariableInstatiationContext blockVariableInstatiation() {
			return GetRuleContext<BlockVariableInstatiationContext>(0);
		}
		public ModuleVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterModuleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitModuleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleVariableDeclarationContext moduleVariableDeclaration() {
		ModuleVariableDeclarationContext _localctx = new ModuleVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 89;
				Match(Const);
				}
			}

			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Local) {
				{
				State = 92;
				Match(Local);
				}
			}

			State = 95;
			blockArg();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assignment) {
				{
				State = 96;
				blockVariableInstatiation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(JuliaParser.Module, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndExprContext endExpr() {
			return GetRuleContext<EndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExprContext[] moduleExpr() {
			return GetRuleContexts<ModuleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExprContext moduleExpr(int i) {
			return GetRuleContext<ModuleExprContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 6, RULE_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(Module);
			State = 100;
			Match(Identifier);
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 101;
					moduleExpr();
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 107;
			endExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExprStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExprContext moduleExpr() {
			return GetRuleContext<ModuleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination() { return GetToken(JuliaParser.Termination, 0); }
		public ModuleExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExprStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterModuleExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitModuleExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExprStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExprStatementContext moduleExprStatement() {
		ModuleExprStatementContext _localctx = new ModuleExprStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_moduleExprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			moduleExpr();
			State = 110;
			Match(Termination);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(JuliaParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleRefContext moduleRef() {
			return GetRuleContext<ModuleRefContext>(0);
		}
		public UsingModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingModule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterUsingModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitUsingModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingModuleContext usingModule() {
		UsingModuleContext _localctx = new UsingModuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_usingModule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(Using);
			State = 113;
			moduleRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(JuliaParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(JuliaParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(JuliaParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(JuliaParser.Dot, i);
		}
		public ModuleRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterModuleRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitModuleRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleRefContext moduleRef() {
		ModuleRefContext _localctx = new ModuleRefContext(Context, State);
		EnterRule(_localctx, 12, RULE_moduleRef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 115;
					Match(Identifier);
					State = 116;
					Match(Dot);
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 122;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleRefContext moduleRef() {
			return GetRuleContext<ModuleRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JuliaParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		public ModuleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterModuleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitModuleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleIdentifierContext moduleIdentifier() {
		ModuleIdentifierContext _localctx = new ModuleIdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_moduleIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			moduleRef();
			State = 125;
			Match(Dot);
			State = 126;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleIdentifierContext moduleIdentifier() {
			return GetRuleContext<ModuleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		public SymbolIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolIdentifierContext symbolIdentifier() {
		SymbolIdentifierContext _localctx = new SymbolIdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_symbolIdentifier);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				moduleIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AbstractType() { return GetToken(JuliaParser.AbstractType, 0); }
		public AbstractStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterAbstractStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitAbstractStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractStructureContext abstractStructure() {
		AbstractStructureContext _localctx = new AbstractStructureContext(Context, State);
		EnterRule(_localctx, 18, RULE_abstractStructure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(AbstractType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(JuliaParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mutable() { return GetToken(JuliaParser.Mutable, 0); }
		public CompositeStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterCompositeStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitCompositeStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeStructureContext compositeStructure() {
		CompositeStructureContext _localctx = new CompositeStructureContext(Context, State);
		EnterRule(_localctx, 20, RULE_compositeStructure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mutable) {
				{
				State = 134;
				Match(Mutable);
				}
			}

			State = 137;
			Match(Struct);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExprContext endExpr() {
			return GetRuleContext<EndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractStructureContext abstractStructure() {
			return GetRuleContext<AbstractStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeStructureContext compositeStructure() {
			return GetRuleContext<CompositeStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructItemContext[] structItem() {
			return GetRuleContexts<StructItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructItemContext structItem(int i) {
			return GetRuleContext<StructItemContext>(i);
		}
		public StructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureContext structure() {
		StructureContext _localctx = new StructureContext(Context, State);
		EnterRule(_localctx, 22, RULE_structure);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AbstractType:
				{
				State = 139;
				abstractStructure();
				}
				break;
			case Mutable:
			case Struct:
				{
				State = 140;
				compositeStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 143;
			typeName();
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 144;
					structItem();
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 150;
			endExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockArgContext blockArg() {
			return GetRuleContext<BlockArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JuliaParser.Const, 0); }
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterStructField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitStructField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 24, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 152;
				Match(Const);
				}
			}

			State = 155;
			blockArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Termination() { return GetTokens(JuliaParser.Termination); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination(int i) {
			return GetToken(JuliaParser.Termination, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField() {
			return GetRuleContext<StructFieldContext>(0);
		}
		public StructItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterStructItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitStructItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructItemContext structItem() {
		StructItemContext _localctx = new StructItemContext(Context, State);
		EnterRule(_localctx, 26, RULE_structItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Termination) {
				{
				State = 157;
				Match(Termination);
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 160;
				function();
				}
				break;
			case 2:
				{
				State = 161;
				structField();
				}
				break;
			}
			State = 164;
			Match(Termination);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVariableDeclarationContext blockVariableDeclaration() {
			return GetRuleContext<BlockVariableDeclarationContext>(0);
		}
		public BlockExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExprContext blockExpr() {
		BlockExprContext _localctx = new BlockExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_blockExpr);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				blockVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExprStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination() { return GetToken(JuliaParser.Termination, 0); }
		public BlockExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExprStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterBlockExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitBlockExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExprStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExprStatementContext blockExprStatement() {
		BlockExprStatementContext _localctx = new BlockExprStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_blockExprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			blockExpr();
			State = 171;
			Match(Termination);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVariableInstatiationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(JuliaParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public BlockVariableInstatiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVariableInstatiation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterBlockVariableInstatiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitBlockVariableInstatiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVariableInstatiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVariableInstatiationContext blockVariableInstatiation() {
		BlockVariableInstatiationContext _localctx = new BlockVariableInstatiationContext(Context, State);
		EnterRule(_localctx, 32, RULE_blockVariableInstatiation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(Assignment);
			State = 174;
			blockExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ValueType() { return GetToken(JuliaParser.ValueType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public BlockArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterBlockArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitBlockArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockArgContext blockArg() {
		BlockArgContext _localctx = new BlockArgContext(Context, State);
		EnterRule(_localctx, 34, RULE_blockArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(Identifier);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ValueType) {
				{
				State = 177;
				Match(ValueType);
				State = 178;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockArgContext blockArg() {
			return GetRuleContext<BlockArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JuliaParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockVariableInstatiationContext blockVariableInstatiation() {
			return GetRuleContext<BlockVariableInstatiationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(JuliaParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(JuliaParser.Local, 0); }
		public BlockVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterBlockVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitBlockVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVariableDeclarationContext blockVariableDeclaration() {
		BlockVariableDeclarationContext _localctx = new BlockVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_blockVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 181;
				Match(Const);
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Global || _la==Local) {
				{
				State = 184;
				_la = TokenStream.LA(1);
				if ( !(_la==Global || _la==Local) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 187;
			blockArg();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assignment) {
				{
				State = 188;
				blockVariableInstatiation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShortFunctionContext shortFunction() {
			return GetRuleContext<ShortFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongFunctionContext longFunction() {
			return GetRuleContext<LongFunctionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 38, RULE_function);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				shortFunction();
				}
				break;
			case Function:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				longFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTupleContext namedTuple() {
			return GetRuleContext<NamedTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleRefContext moduleRef() {
			return GetRuleContext<ModuleRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		public FunctionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeaderContext functionHeader() {
		FunctionHeaderContext _localctx = new FunctionHeaderContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 195;
				moduleRef();
				}
				break;
			case 2:
				{
				State = 196;
				Match(Identifier);
				}
				break;
			}
			State = 199;
			namedTuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprStatementContext blockExprStatement() {
			return GetRuleContext<BlockExprStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination() { return GetToken(JuliaParser.Termination, 0); }
		public FunctionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterFunctionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitFunctionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionItemContext functionItem() {
		FunctionItemContext _localctx = new FunctionItemContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			blockExprStatement();
			State = 202;
			Match(Termination);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolIdentifierContext symbolIdentifier() {
			return GetRuleContext<SymbolIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			symbolIdentifier();
			State = 205;
			tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeaderContext functionHeader() {
			return GetRuleContext<FunctionHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JuliaParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionItemContext functionItem() {
			return GetRuleContext<FunctionItemContext>(0);
		}
		public ShortFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterShortFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitShortFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortFunctionContext shortFunction() {
		ShortFunctionContext _localctx = new ShortFunctionContext(Context, State);
		EnterRule(_localctx, 46, RULE_shortFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			functionHeader();
			State = 208;
			Match(Assign);
			State = 209;
			functionItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(JuliaParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeaderContext functionHeader() {
			return GetRuleContext<FunctionHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination() { return GetToken(JuliaParser.Termination, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndExprContext endExpr() {
			return GetRuleContext<EndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionItemContext[] functionItem() {
			return GetRuleContexts<FunctionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionItemContext functionItem(int i) {
			return GetRuleContext<FunctionItemContext>(i);
		}
		public LongFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterLongFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitLongFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongFunctionContext longFunction() {
		LongFunctionContext _localctx = new LongFunctionContext(Context, State);
		EnterRule(_localctx, 48, RULE_longFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(Function);
			State = 212;
			functionHeader();
			State = 213;
			Match(Termination);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Global) | (1L << Const) | (1L << Local) | (1L << Identifier))) != 0)) {
				{
				{
				State = 214;
				functionItem();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			endExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(JuliaParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleListContext tupleList() {
			return GetRuleContext<TupleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(JuliaParser.LeftParen, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 50, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(RightParen);
			State = 223;
			tupleList();
			State = 224;
			Match(LeftParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(JuliaParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(JuliaParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockArgContext[] blockArg() {
			return GetRuleContexts<BlockArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockArgContext blockArg(int i) {
			return GetRuleContext<BlockArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JuliaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JuliaParser.Comma, i);
		}
		public NamedTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterNamedTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitNamedTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedTupleContext namedTuple() {
		NamedTupleContext _localctx = new NamedTupleContext(Context, State);
		EnterRule(_localctx, 52, RULE_namedTuple);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(RightParen);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 227;
						blockArg();
						State = 228;
						Match(Comma);
						}
						} 
					}
					State = 234;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 235;
				blockArg();
				}
			}

			State = 238;
			Match(LeftParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypetupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(JuliaParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleListContext tupleList() {
			return GetRuleContext<TupleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(JuliaParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(JuliaParser.LeftParen, 0); }
		public TypetupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typetuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterTypetuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitTypetuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypetuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypetupleContext typetuple() {
		TypetupleContext _localctx = new TypetupleContext(Context, State);
		EnterRule(_localctx, 54, RULE_typetuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(RightParen);
			State = 241;
			tupleList();
			State = 242;
			Match(Comma);
			State = 243;
			Match(LeftParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JuliaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JuliaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprContext[] blockExpr() {
			return GetRuleContexts<BlockExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprContext blockExpr(int i) {
			return GetRuleContext<BlockExprContext>(i);
		}
		public TupleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterTupleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitTupleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleListContext tupleList() {
		TupleListContext _localctx = new TupleListContext(Context, State);
		EnterRule(_localctx, 56, RULE_tupleList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Global) | (1L << Const) | (1L << Local) | (1L << Identifier))) != 0)) {
				{
				{
				State = 245;
				blockExpr();
				State = 246;
				Match(Comma);
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253;
			Match(Comma);
			State = 254;
			blockExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extend() { return GetToken(JuliaParser.Extend, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(Identifier);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extend) {
				{
				State = 257;
				Match(Extend);
				State = 258;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterizedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBrace() { return GetTokens(JuliaParser.RightBrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace(int i) {
			return GetToken(JuliaParser.RightBrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBrace() { return GetTokens(JuliaParser.LeftBrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace(int i) {
			return GetToken(JuliaParser.LeftBrace, i);
		}
		public ParameterizedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterizedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterParameterizedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitParameterizedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterizedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterizedTypeContext parameterizedType() {
		ParameterizedTypeContext _localctx = new ParameterizedTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_parameterizedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(Identifier);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 262;
				Match(RightBrace);
				State = 263;
				type();
				State = 264;
				Match(LeftBrace);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==RightBrace );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JuliaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterizedTypeContext parameterizedType() {
			return GetRuleContext<ParameterizedTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_type);
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				parameterizedType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(JuliaParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination() { return GetToken(JuliaParser.Termination, 0); }
		public EndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.EnterEndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaListener typedListener = listener as IJuliaListener;
			if (typedListener != null) typedListener.ExitEndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaVisitor<TResult> typedVisitor = visitor as IJuliaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExprContext endExpr() {
		EndExprContext _localctx = new EndExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_endExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Termination) {
				{
				State = 274;
				Match(Termination);
				}
			}

			State = 277;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,67,280,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,4,0,70,8,0,11,0,12,
		0,71,3,0,74,8,0,1,0,1,0,3,0,78,8,0,1,1,3,1,81,8,1,1,1,1,1,1,1,1,1,1,1,
		3,1,88,8,1,1,2,3,2,91,8,2,1,2,3,2,94,8,2,1,2,1,2,3,2,98,8,2,1,3,1,3,1,
		3,5,3,103,8,3,10,3,12,3,106,9,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
		6,5,6,118,8,6,10,6,12,6,121,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,3,8,131,
		8,8,1,9,1,9,1,10,3,10,136,8,10,1,10,1,10,1,11,1,11,3,11,142,8,11,1,11,
		1,11,5,11,146,8,11,10,11,12,11,149,9,11,1,11,1,11,1,12,3,12,154,8,12,1,
		12,1,12,1,13,3,13,159,8,13,1,13,1,13,3,13,163,8,13,1,13,1,13,1,14,1,14,
		3,14,169,8,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,3,17,180,8,
		17,1,18,3,18,183,8,18,1,18,3,18,186,8,18,1,18,1,18,3,18,190,8,18,1,19,
		1,19,3,19,194,8,19,1,20,1,20,3,20,198,8,20,1,20,1,20,1,21,1,21,1,21,1,
		22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,216,8,24,10,
		24,12,24,219,9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,5,
		26,231,8,26,10,26,12,26,234,9,26,1,26,3,26,237,8,26,1,26,1,26,1,27,1,27,
		1,27,1,27,1,27,1,28,1,28,1,28,5,28,249,8,28,10,28,12,28,252,9,28,1,28,
		1,28,1,28,1,29,1,29,1,29,3,29,260,8,29,1,30,1,30,1,30,1,30,1,30,4,30,267,
		8,30,11,30,12,30,268,1,31,1,31,3,31,273,8,31,1,32,3,32,276,8,32,1,32,1,
		32,1,32,0,0,33,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,0,1,2,0,5,5,7,7,281,0,77,1,0,0,
		0,2,80,1,0,0,0,4,90,1,0,0,0,6,99,1,0,0,0,8,109,1,0,0,0,10,112,1,0,0,0,
		12,119,1,0,0,0,14,124,1,0,0,0,16,130,1,0,0,0,18,132,1,0,0,0,20,135,1,0,
		0,0,22,141,1,0,0,0,24,153,1,0,0,0,26,158,1,0,0,0,28,168,1,0,0,0,30,170,
		1,0,0,0,32,173,1,0,0,0,34,176,1,0,0,0,36,182,1,0,0,0,38,193,1,0,0,0,40,
		197,1,0,0,0,42,201,1,0,0,0,44,204,1,0,0,0,46,207,1,0,0,0,48,211,1,0,0,
		0,50,222,1,0,0,0,52,226,1,0,0,0,54,240,1,0,0,0,56,250,1,0,0,0,58,256,1,
		0,0,0,60,261,1,0,0,0,62,272,1,0,0,0,64,275,1,0,0,0,66,78,5,0,0,1,67,74,
		3,2,1,0,68,70,3,8,4,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,
		1,0,0,0,72,74,1,0,0,0,73,67,1,0,0,0,73,69,1,0,0,0,74,75,1,0,0,0,75,76,
		5,0,0,1,76,78,1,0,0,0,77,66,1,0,0,0,77,73,1,0,0,0,78,1,1,0,0,0,79,81,5,
		57,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,87,1,0,0,0,82,88,3,22,11,0,83,88,
		3,4,2,0,84,88,3,6,3,0,85,88,3,10,5,0,86,88,3,28,14,0,87,82,1,0,0,0,87,
		83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,3,1,0,0,0,89,91,
		5,6,0,0,90,89,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,94,5,7,0,0,93,92,
		1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,97,3,34,17,0,96,98,3,32,16,0,97,
		96,1,0,0,0,97,98,1,0,0,0,98,5,1,0,0,0,99,100,5,10,0,0,100,104,5,61,0,0,
		101,103,3,2,1,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,
		1,0,0,0,105,107,1,0,0,0,106,104,1,0,0,0,107,108,3,64,32,0,108,7,1,0,0,
		0,109,110,3,2,1,0,110,111,5,57,0,0,111,9,1,0,0,0,112,113,5,3,0,0,113,114,
		3,12,6,0,114,11,1,0,0,0,115,116,5,61,0,0,116,118,5,55,0,0,117,115,1,0,
		0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,122,1,0,0,0,121,
		119,1,0,0,0,122,123,5,61,0,0,123,13,1,0,0,0,124,125,3,12,6,0,125,126,5,
		55,0,0,126,127,5,61,0,0,127,15,1,0,0,0,128,131,3,14,7,0,129,131,5,61,0,
		0,130,128,1,0,0,0,130,129,1,0,0,0,131,17,1,0,0,0,132,133,5,2,0,0,133,19,
		1,0,0,0,134,136,5,8,0,0,135,134,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,
		0,137,138,5,11,0,0,138,21,1,0,0,0,139,142,3,18,9,0,140,142,3,20,10,0,141,
		139,1,0,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,147,3,58,29,0,144,146,
		3,26,13,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,
		0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,3,64,32,0,151,23,1,0,0,0,152,
		154,5,6,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,156,3,
		34,17,0,156,25,1,0,0,0,157,159,5,57,0,0,158,157,1,0,0,0,158,159,1,0,0,
		0,159,162,1,0,0,0,160,163,3,38,19,0,161,163,3,24,12,0,162,160,1,0,0,0,
		162,161,1,0,0,0,163,164,1,0,0,0,164,165,5,57,0,0,165,27,1,0,0,0,166,169,
		3,44,22,0,167,169,3,36,18,0,168,166,1,0,0,0,168,167,1,0,0,0,169,29,1,0,
		0,0,170,171,3,28,14,0,171,172,5,57,0,0,172,31,1,0,0,0,173,174,5,59,0,0,
		174,175,3,28,14,0,175,33,1,0,0,0,176,179,5,61,0,0,177,178,5,50,0,0,178,
		180,3,62,31,0,179,177,1,0,0,0,179,180,1,0,0,0,180,35,1,0,0,0,181,183,5,
		6,0,0,182,181,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,186,7,0,0,0,
		185,184,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,189,3,34,17,0,188,
		190,3,32,16,0,189,188,1,0,0,0,189,190,1,0,0,0,190,37,1,0,0,0,191,194,3,
		46,23,0,192,194,3,48,24,0,193,191,1,0,0,0,193,192,1,0,0,0,194,39,1,0,0,
		0,195,198,3,12,6,0,196,198,5,61,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,
		199,1,0,0,0,199,200,3,52,26,0,200,41,1,0,0,0,201,202,3,30,15,0,202,203,
		5,57,0,0,203,43,1,0,0,0,204,205,3,16,8,0,205,206,3,50,25,0,206,45,1,0,
		0,0,207,208,3,40,20,0,208,209,5,53,0,0,209,210,3,42,21,0,210,47,1,0,0,
		0,211,212,5,9,0,0,212,213,3,40,20,0,213,217,5,57,0,0,214,216,3,42,21,0,
		215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,
		1,0,0,0,219,217,1,0,0,0,220,221,3,64,32,0,221,49,1,0,0,0,222,223,5,22,
		0,0,223,224,3,56,28,0,224,225,5,21,0,0,225,51,1,0,0,0,226,236,5,22,0,0,
		227,228,3,34,17,0,228,229,5,52,0,0,229,231,1,0,0,0,230,227,1,0,0,0,231,
		234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,232,1,
		0,0,0,235,237,3,34,17,0,236,232,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,
		0,238,239,5,21,0,0,239,53,1,0,0,0,240,241,5,22,0,0,241,242,3,56,28,0,242,
		243,5,52,0,0,243,244,5,21,0,0,244,55,1,0,0,0,245,246,3,28,14,0,246,247,
		5,52,0,0,247,249,1,0,0,0,248,245,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,
		0,250,251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,5,52,0,0,254,
		255,3,28,14,0,255,57,1,0,0,0,256,259,5,61,0,0,257,258,5,4,0,0,258,260,
		3,62,31,0,259,257,1,0,0,0,259,260,1,0,0,0,260,59,1,0,0,0,261,266,5,61,
		0,0,262,263,5,26,0,0,263,264,3,62,31,0,264,265,5,25,0,0,265,267,1,0,0,
		0,266,262,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,
		61,1,0,0,0,270,273,5,61,0,0,271,273,3,60,30,0,272,270,1,0,0,0,272,271,
		1,0,0,0,273,63,1,0,0,0,274,276,5,57,0,0,275,274,1,0,0,0,275,276,1,0,0,
		0,276,277,1,0,0,0,277,278,5,20,0,0,278,65,1,0,0,0,32,71,73,77,80,87,90,
		93,97,104,119,130,135,141,147,153,158,162,168,179,182,185,189,193,197,
		217,232,236,250,259,268,272,275
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HyperSphere
