//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\JohnB\Desktop\HyperProjects\Spinor\runtime\src\core\parse\SpinorParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HyperSphere {
using runtime.core.parse;
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SpinorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public interface ISpinorParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.topExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTopExpr([NotNull] SpinorParser.TopExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.topExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTopExpr([NotNull] SpinorParser.TopExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.exprBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprBlock([NotNull] SpinorParser.ExprBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.exprBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprBlock([NotNull] SpinorParser.ExprBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCall</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] SpinorParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCall</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] SpinorParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>struct</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStruct([NotNull] SpinorParser.StructContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>struct</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStruct([NotNull] SpinorParser.StructContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>module</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule([NotNull] SpinorParser.ModuleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>module</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule([NotNull] SpinorParser.ModuleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>primitive</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimitive([NotNull] SpinorParser.PrimitiveContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>primitive</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimitive([NotNull] SpinorParser.PrimitiveContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>abstractOrBuiltin</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstractOrBuiltin([NotNull] SpinorParser.AbstractOrBuiltinContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>abstractOrBuiltin</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstractOrBuiltin([NotNull] SpinorParser.AbstractOrBuiltinContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>block</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] SpinorParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>block</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] SpinorParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>tupleExpr</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleExpr([NotNull] SpinorParser.TupleExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tupleExpr</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleExpr([NotNull] SpinorParser.TupleExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nameExpr</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNameExpr([NotNull] SpinorParser.NameExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nameExpr</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNameExpr([NotNull] SpinorParser.NameExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpr([NotNull] SpinorParser.LiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="SpinorParser.primitiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpr([NotNull] SpinorParser.LiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.binaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryExpr([NotNull] SpinorParser.BinaryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.binaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryExpr([NotNull] SpinorParser.BinaryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] SpinorParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] SpinorParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple([NotNull] SpinorParser.TupleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple([NotNull] SpinorParser.TupleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInteger([NotNull] SpinorParser.IntegerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInteger([NotNull] SpinorParser.IntegerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.float"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] SpinorParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.float"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] SpinorParser.FloatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpinorParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] SpinorParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpinorParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] SpinorParser.LiteralContext context);
}
} // namespace HyperSphere
