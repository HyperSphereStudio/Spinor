//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\JohnB\Desktop\HyperProjects\Spinor\runtime\src\core\parse\SpinorParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HyperSphere {
using runtime.core.parse;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SpinorParser : SuperSpinorParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		QUOTE=1, BEGIN=2, DIGIT=3, COND=4, DOT=5, END=6, BAREMODULE=7, MODULE=8, 
		MUTABLE=9, STRUCT=10, RPAR=11, LPAR=12, COMMA=13, TYPE=14, ABSTRACT=15, 
		PRIMITIVE=16, BUILTIN=17, EXTEND=18, BinaryOrAssignableOp=19, Name=20, 
		Termination=21, NewLine=22, Whitespace=23, BlockComment=24, LineComment=25;
	public const int
		RULE_topExpr = 0, RULE_exprBlock = 1, RULE_primaryExpr = 2, RULE_expr = 3, 
		RULE_tuple = 4, RULE_integer = 5, RULE_float = 6, RULE_literal = 7;
	public static readonly string[] ruleNames = {
		"topExpr", "exprBlock", "primaryExpr", "expr", "tuple", "integer", "float", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'quote'", "'begin'", null, "'?'", "'.'", "'end'", "'baremodule'", 
		"'module'", "'mutable'", "'struct'", "'('", "')'", "','", "'type'", "'abstract'", 
		"'primitive'", "'abstractbuiltin'", "'<:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "QUOTE", "BEGIN", "DIGIT", "COND", "DOT", "END", "BAREMODULE", "MODULE", 
		"MUTABLE", "STRUCT", "RPAR", "LPAR", "COMMA", "TYPE", "ABSTRACT", "PRIMITIVE", 
		"BUILTIN", "EXTEND", "BinaryOrAssignableOp", "Name", "Termination", "NewLine", 
		"Whitespace", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpinorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpinorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SpinorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SpinorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TopExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SpinorParser.Eof, 0); }
		public TopExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterTopExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitTopExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopExprContext topExpr() {
		TopExprContext _localctx = new TopExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_topExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			exprBlock();
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Termination() { return GetTokens(SpinorParser.Termination); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination(int i) {
			return GetToken(SpinorParser.Termination, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterExprBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitExprBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprBlockContext exprBlock() {
		ExprBlockContext _localctx = new ExprBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_exprBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Termination) {
				{
				{
				State = 19;
				Match(Termination);
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 25;
					expr(0);
					State = 29;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Termination) {
						{
						{
						State = 26;
						Match(Termination);
						}
						}
						State = 31;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					} 
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUOTE) | (1L << BEGIN) | (1L << DIGIT) | (1L << BAREMODULE) | (1L << MODULE) | (1L << MUTABLE) | (1L << STRUCT) | (1L << RPAR) | (1L << ABSTRACT) | (1L << PRIMITIVE) | (1L << BUILTIN) | (1L << Name))) != 0)) {
				{
				State = 37;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
	 
		public PrimaryExprContext() { }
		public virtual void CopyFrom(PrimaryExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructContext : PrimaryExprContext {
		public IToken mutable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SpinorParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(SpinorParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTABLE() { return GetToken(SpinorParser.MUTABLE, 0); }
		public StructContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveContext : PrimaryExprContext {
		public IToken name;
		public IToken extends;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMITIVE() { return GetToken(SpinorParser.PRIMITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SpinorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(SpinorParser.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(SpinorParser.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(SpinorParser.EXTEND, 0); }
		public PrimitiveContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(SpinorParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public FunctionCallContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleContext : PrimaryExprContext {
		public IToken bare;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(SpinorParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(SpinorParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAREMODULE() { return GetToken(SpinorParser.BAREMODULE, 0); }
		public ModuleContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbstractOrBuiltinContext : PrimaryExprContext {
		public IToken name;
		public IToken extends;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SpinorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(SpinorParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(SpinorParser.BUILTIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(SpinorParser.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(SpinorParser.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(SpinorParser.EXTEND, 0); }
		public AbstractOrBuiltinContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterAbstractOrBuiltin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitAbstractOrBuiltin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractOrBuiltin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : PrimaryExprContext {
		public IToken head;
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(SpinorParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(SpinorParser.BEGIN, 0); }
		public BlockContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExprContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public TupleExprContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExprContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(SpinorParser.Name, 0); }
		public NameExprContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterNameExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitNameExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_primaryExpr);
		int _la;
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new FunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				Match(Name);
				State = 41;
				tuple();
				}
				break;
			case 2:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUTABLE) {
					{
					State = 42;
					((StructContext)_localctx).mutable = Match(MUTABLE);
					}
				}

				State = 45;
				Match(STRUCT);
				State = 46;
				Match(Name);
				SpinorState = SpinorState.Expression;
				State = 48;
				exprBlock();
				State = 49;
				Match(END);
				}
				break;
			case 3:
				_localctx = new ModuleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MODULE:
					{
					State = 51;
					Match(MODULE);
					}
					break;
				case BAREMODULE:
					{
					State = 52;
					((ModuleContext)_localctx).bare = Match(BAREMODULE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 55;
				Match(Name);
				State = 56;
				exprBlock();
				State = 57;
				Match(END);
				}
				break;
			case 4:
				_localctx = new PrimitiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				Match(PRIMITIVE);
				State = 60;
				Match(TYPE);
				State = 61;
				((PrimitiveContext)_localctx).name = Match(Name);
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTEND) {
					{
					State = 62;
					Match(EXTEND);
					State = 63;
					((PrimitiveContext)_localctx).extends = Match(Name);
					}
				}

				State = 66;
				integer();
				State = 67;
				Match(END);
				}
				break;
			case 5:
				_localctx = new AbstractOrBuiltinContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				_la = TokenStream.LA(1);
				if ( !(_la==ABSTRACT || _la==BUILTIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 70;
				Match(TYPE);
				State = 71;
				((AbstractOrBuiltinContext)_localctx).name = Match(Name);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTEND) {
					{
					State = 72;
					Match(EXTEND);
					State = 73;
					((AbstractOrBuiltinContext)_localctx).extends = Match(Name);
					}
				}

				State = 76;
				Match(END);
				}
				break;
			case 6:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 77;
				((BlockContext)_localctx).head = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==QUOTE || _la==BEGIN) ) {
					((BlockContext)_localctx).head = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 78;
				exprBlock();
				State = 79;
				Match(END);
				}
				break;
			case 7:
				_localctx = new TupleExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 81;
				tuple();
				}
				break;
			case 8:
				_localctx = new NameExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 82;
				Match(Name);
				}
				break;
			case 9:
				_localctx = new LiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 83;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public int p;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BinaryOrAssignableOp() { return GetTokens(SpinorParser.BinaryOrAssignableOp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryOrAssignableOp(int i) {
			return GetToken(SpinorParser.BinaryOrAssignableOp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ExprContext(ParserRuleContext parent, int invokingState, int p)
			: base(parent, invokingState)
		{
			this.p = p;
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr(int p) {
		ExprContext _localctx = new ExprContext(Context, State, p);
		EnterRule(_localctx, 6, RULE_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			primaryExpr();
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 87;
					if (!(OperatorPrecedence >= _localctx.p)) throw new FailedPredicateException(this, "OperatorPrecedence >= $p");
					State = 88;
					Match(BinaryOrAssignableOp);
					State = 89;
					expr(NextOperatorPrecedence);
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SpinorParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SpinorParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SpinorParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SpinorParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 8, RULE_tuple);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(RPAR);
			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 96;
					expr(0);
					State = 97;
					Match(COMMA);
					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 104;
			expr(0);
			State = 105;
			Match(LPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(SpinorParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(SpinorParser.DIGIT, i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 10, RULE_integer);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 107;
					Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SpinorParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(SpinorParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(SpinorParser.DIGIT, i);
		}
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 12, RULE_float);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 112;
				Match(DIGIT);
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			State = 117;
			Match(DOT);
			State = 119;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 118;
					Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				@float();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				integer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return OperatorPrecedence >= _localctx.p;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,25,128,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,5,1,21,8,1,10,1,12,1,24,9,1,1,1,1,1,5,1,28,8,1,10,
		1,12,1,31,9,1,5,1,33,8,1,10,1,12,1,36,9,1,1,1,3,1,39,8,1,1,2,1,2,1,2,3,
		2,44,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,54,8,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,65,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,75,8,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,85,8,2,1,3,1,3,1,3,1,3,5,3,91,8,
		3,10,3,12,3,94,9,3,1,4,1,4,1,4,1,4,5,4,100,8,4,10,4,12,4,103,9,4,1,4,1,
		4,1,4,1,5,4,5,109,8,5,11,5,12,5,110,1,6,4,6,114,8,6,11,6,12,6,115,1,6,
		1,6,4,6,120,8,6,11,6,12,6,121,1,7,1,7,3,7,126,8,7,1,7,0,0,8,0,2,4,6,8,
		10,12,14,0,2,2,0,15,15,17,17,1,0,1,2,141,0,16,1,0,0,0,2,22,1,0,0,0,4,84,
		1,0,0,0,6,86,1,0,0,0,8,95,1,0,0,0,10,108,1,0,0,0,12,113,1,0,0,0,14,125,
		1,0,0,0,16,17,3,2,1,0,17,18,5,0,0,1,18,1,1,0,0,0,19,21,5,21,0,0,20,19,
		1,0,0,0,21,24,1,0,0,0,22,20,1,0,0,0,22,23,1,0,0,0,23,34,1,0,0,0,24,22,
		1,0,0,0,25,29,3,6,3,0,26,28,5,21,0,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,
		1,0,0,0,29,30,1,0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,32,25,1,0,0,0,33,36,
		1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,38,1,0,0,0,36,34,1,0,0,0,37,39,
		3,6,3,0,38,37,1,0,0,0,38,39,1,0,0,0,39,3,1,0,0,0,40,41,5,20,0,0,41,85,
		3,8,4,0,42,44,5,9,0,0,43,42,1,0,0,0,43,44,1,0,0,0,44,45,1,0,0,0,45,46,
		5,10,0,0,46,47,5,20,0,0,47,48,6,2,-1,0,48,49,3,2,1,0,49,50,5,6,0,0,50,
		85,1,0,0,0,51,54,5,8,0,0,52,54,5,7,0,0,53,51,1,0,0,0,53,52,1,0,0,0,54,
		55,1,0,0,0,55,56,5,20,0,0,56,57,3,2,1,0,57,58,5,6,0,0,58,85,1,0,0,0,59,
		60,5,16,0,0,60,61,5,14,0,0,61,64,5,20,0,0,62,63,5,18,0,0,63,65,5,20,0,
		0,64,62,1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,67,3,10,5,0,67,68,5,6,0,
		0,68,85,1,0,0,0,69,70,7,0,0,0,70,71,5,14,0,0,71,74,5,20,0,0,72,73,5,18,
		0,0,73,75,5,20,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,85,5,6,
		0,0,77,78,7,1,0,0,78,79,3,2,1,0,79,80,5,6,0,0,80,85,1,0,0,0,81,85,3,8,
		4,0,82,85,5,20,0,0,83,85,3,14,7,0,84,40,1,0,0,0,84,43,1,0,0,0,84,53,1,
		0,0,0,84,59,1,0,0,0,84,69,1,0,0,0,84,77,1,0,0,0,84,81,1,0,0,0,84,82,1,
		0,0,0,84,83,1,0,0,0,85,5,1,0,0,0,86,92,3,4,2,0,87,88,4,3,0,1,88,89,5,19,
		0,0,89,91,3,6,3,0,90,87,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,
		0,0,93,7,1,0,0,0,94,92,1,0,0,0,95,101,5,11,0,0,96,97,3,6,3,0,97,98,5,13,
		0,0,98,100,1,0,0,0,99,96,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,
		1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,3,6,3,0,105,106,5,12,0,
		0,106,9,1,0,0,0,107,109,5,3,0,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,
		1,0,0,0,110,111,1,0,0,0,111,11,1,0,0,0,112,114,5,3,0,0,113,112,1,0,0,0,
		114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,117,119,
		5,5,0,0,118,120,5,3,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,
		0,121,122,1,0,0,0,122,13,1,0,0,0,123,126,3,12,6,0,124,126,3,10,5,0,125,
		123,1,0,0,0,125,124,1,0,0,0,126,15,1,0,0,0,15,22,29,34,38,43,53,64,74,
		84,92,101,110,115,121,125
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HyperSphere
