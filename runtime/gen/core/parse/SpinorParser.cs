//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\JohnB\Desktop\HyperProjects\Spinor\runtime\src\core\parse\SpinorParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HyperSphere {
using runtime.parse;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SpinorParser : SuperSpinorParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BinaryOrAssignableOp=1, QUOTE=2, BEGIN=3, DIGIT=4, COND=5, DOT=6, END=7, 
		BAREMODULE=8, MODULE=9, MUTABLE=10, STRUCT=11, RPAR=12, LPAR=13, COMMA=14, 
		ID=15, Termination=16, NewLine=17, Whitespace=18, BlockComment=19, LineComment=20;
	public const int
		RULE_topExpr = 0, RULE_exprBlock = 1, RULE_primaryExpr = 2, RULE_expr = 3, 
		RULE_tuple = 4, RULE_literal = 5;
	public static readonly string[] ruleNames = {
		"topExpr", "exprBlock", "primaryExpr", "expr", "tuple", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'quote'", "'begin'", null, "'?'", "'.'", "'end'", "'baremodule'", 
		"'module'", "'mutable'", "'struct'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BinaryOrAssignableOp", "QUOTE", "BEGIN", "DIGIT", "COND", "DOT", 
		"END", "BAREMODULE", "MODULE", "MUTABLE", "STRUCT", "RPAR", "LPAR", "COMMA", 
		"ID", "Termination", "NewLine", "Whitespace", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpinorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpinorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SpinorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SpinorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TopExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SpinorParser.Eof, 0); }
		public TopExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterTopExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitTopExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopExprContext topExpr() {
		TopExprContext _localctx = new TopExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_topExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			exprBlock();
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Termination() { return GetTokens(SpinorParser.Termination); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Termination(int i) {
			return GetToken(SpinorParser.Termination, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterExprBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitExprBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprBlockContext exprBlock() {
		ExprBlockContext _localctx = new ExprBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_exprBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Termination) {
				{
				{
				State = 15;
				Match(Termination);
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 30;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 21;
					expr(0);
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Termination) {
						{
						{
						State = 22;
						Match(Termination);
						}
						}
						State = 27;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					} 
				}
				State = 32;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUOTE) | (1L << BEGIN) | (1L << DIGIT) | (1L << BAREMODULE) | (1L << MODULE) | (1L << MUTABLE) | (1L << STRUCT) | (1L << RPAR) | (1L << ID))) != 0)) {
				{
				State = 33;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
	 
		public PrimaryExprContext() { }
		public virtual void CopyFrom(PrimaryExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructContext : PrimaryExprContext {
		public IToken mutable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SpinorParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SpinorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTABLE() { return GetToken(SpinorParser.MUTABLE, 0); }
		public StructContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SpinorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public FunctionCallContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleContext : PrimaryExprContext {
		public IToken bare;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SpinorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(SpinorParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAREMODULE() { return GetToken(SpinorParser.BAREMODULE, 0); }
		public ModuleContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SpinorParser.ID, 0); }
		public NameContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : PrimaryExprContext {
		public IToken head;
		[System.Diagnostics.DebuggerNonUserCode] public ExprBlockContext exprBlock() {
			return GetRuleContext<ExprBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SpinorParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(SpinorParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(SpinorParser.BEGIN, 0); }
		public BlockContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExprContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public TupleExprContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_primaryExpr);
		int _la;
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new FunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				Match(ID);
				State = 37;
				tuple();
				}
				break;
			case 2:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUTABLE) {
					{
					State = 38;
					((StructContext)_localctx).mutable = Match(MUTABLE);
					}
				}

				State = 41;
				Match(STRUCT);
				State = 42;
				Match(ID);
				State = 43;
				exprBlock();
				State = 44;
				Match(END);
				}
				break;
			case 3:
				_localctx = new ModuleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 48;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MODULE:
					{
					State = 46;
					Match(MODULE);
					}
					break;
				case BAREMODULE:
					{
					State = 47;
					((ModuleContext)_localctx).bare = Match(BAREMODULE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 50;
				Match(ID);
				State = 51;
				exprBlock();
				State = 52;
				Match(END);
				}
				break;
			case 4:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				((BlockContext)_localctx).head = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==QUOTE || _la==BEGIN) ) {
					((BlockContext)_localctx).head = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 55;
				exprBlock();
				State = 56;
				Match(END);
				}
				break;
			case 5:
				_localctx = new TupleExprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 58;
				tuple();
				}
				break;
			case 6:
				_localctx = new NameContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 59;
				Match(ID);
				}
				break;
			case 7:
				_localctx = new LiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 60;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public int p;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BinaryOrAssignableOp() { return GetTokens(SpinorParser.BinaryOrAssignableOp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryOrAssignableOp(int i) {
			return GetToken(SpinorParser.BinaryOrAssignableOp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ExprContext(ParserRuleContext parent, int invokingState, int p)
			: base(parent, invokingState)
		{
			this.p = p;
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr(int p) {
		ExprContext _localctx = new ExprContext(Context, State, p);
		EnterRule(_localctx, 6, RULE_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			primaryExpr();
			State = 69;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 64;
					if (!(OperatorPrecedence >= _localctx.p)) throw new FailedPredicateException(this, "OperatorPrecedence >= $p");
					State = 65;
					Match(BinaryOrAssignableOp);
					State = 66;
					expr(NextOperatorPrecedence);
					}
					} 
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SpinorParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SpinorParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SpinorParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SpinorParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 8, RULE_tuple);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(RPAR);
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73;
					expr(0);
					State = 74;
					Match(COMMA);
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 81;
			expr(0);
			State = 82;
			Match(LPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(SpinorParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(SpinorParser.DIGIT, i);
		}
		public IntegerContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SpinorParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(SpinorParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(SpinorParser.DIGIT, i);
		}
		public FloatContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpinorParserListener typedListener = listener as ISpinorParserListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpinorParserVisitor<TResult> typedVisitor = visitor as ISpinorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_literal);
		int _la;
		try {
			int _alt;
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 84;
					Match(DIGIT);
					}
					}
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DIGIT );
				State = 89;
				Match(DOT);
				State = 91;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 90;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 93;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 95;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 98;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return OperatorPrecedence >= _localctx.p;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,20,103,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,
		1,1,5,1,17,8,1,10,1,12,1,20,9,1,1,1,1,1,5,1,24,8,1,10,1,12,1,27,9,1,5,
		1,29,8,1,10,1,12,1,32,9,1,1,1,3,1,35,8,1,1,2,1,2,1,2,3,2,40,8,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,3,2,49,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,3,2,62,8,2,1,3,1,3,1,3,1,3,5,3,68,8,3,10,3,12,3,71,9,3,1,4,1,4,1,
		4,1,4,5,4,77,8,4,10,4,12,4,80,9,4,1,4,1,4,1,4,1,5,4,5,86,8,5,11,5,12,5,
		87,1,5,1,5,4,5,92,8,5,11,5,12,5,93,1,5,4,5,97,8,5,11,5,12,5,98,3,5,101,
		8,5,1,5,0,0,6,0,2,4,6,8,10,0,1,1,0,2,3,114,0,12,1,0,0,0,2,18,1,0,0,0,4,
		61,1,0,0,0,6,63,1,0,0,0,8,72,1,0,0,0,10,100,1,0,0,0,12,13,3,2,1,0,13,14,
		5,0,0,1,14,1,1,0,0,0,15,17,5,16,0,0,16,15,1,0,0,0,17,20,1,0,0,0,18,16,
		1,0,0,0,18,19,1,0,0,0,19,30,1,0,0,0,20,18,1,0,0,0,21,25,3,6,3,0,22,24,
		5,16,0,0,23,22,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,29,
		1,0,0,0,27,25,1,0,0,0,28,21,1,0,0,0,29,32,1,0,0,0,30,28,1,0,0,0,30,31,
		1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,33,35,3,6,3,0,34,33,1,0,0,0,34,35,
		1,0,0,0,35,3,1,0,0,0,36,37,5,15,0,0,37,62,3,8,4,0,38,40,5,10,0,0,39,38,
		1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,42,5,11,0,0,42,43,5,15,0,0,43,44,
		3,2,1,0,44,45,5,7,0,0,45,62,1,0,0,0,46,49,5,9,0,0,47,49,5,8,0,0,48,46,
		1,0,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,51,5,15,0,0,51,52,3,2,1,0,52,53,
		5,7,0,0,53,62,1,0,0,0,54,55,7,0,0,0,55,56,3,2,1,0,56,57,5,7,0,0,57,62,
		1,0,0,0,58,62,3,8,4,0,59,62,5,15,0,0,60,62,3,10,5,0,61,36,1,0,0,0,61,39,
		1,0,0,0,61,48,1,0,0,0,61,54,1,0,0,0,61,58,1,0,0,0,61,59,1,0,0,0,61,60,
		1,0,0,0,62,5,1,0,0,0,63,69,3,4,2,0,64,65,4,3,0,1,65,66,5,1,0,0,66,68,3,
		6,3,0,67,64,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,7,1,0,
		0,0,71,69,1,0,0,0,72,78,5,12,0,0,73,74,3,6,3,0,74,75,5,14,0,0,75,77,1,
		0,0,0,76,73,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,81,1,
		0,0,0,80,78,1,0,0,0,81,82,3,6,3,0,82,83,5,13,0,0,83,9,1,0,0,0,84,86,5,
		4,0,0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,89,1,
		0,0,0,89,91,5,6,0,0,90,92,5,4,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,
		0,0,0,93,94,1,0,0,0,94,101,1,0,0,0,95,97,5,4,0,0,96,95,1,0,0,0,97,98,1,
		0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,85,1,0,0,0,100,96,
		1,0,0,0,101,11,1,0,0,0,13,18,25,30,34,39,48,61,69,78,87,93,98,100
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HyperSphere
