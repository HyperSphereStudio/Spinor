//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\JohnB\Desktop\HyperProjects\Spinor\runtime\src\core\parse\SpinorLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HyperSphere {
using runtime.core.parse;
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SpinorLexer : SuperSpinorLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		QUOTE=1, BEGIN=2, DIGIT=3, COND=4, DOT=5, END=6, BAREMODULE=7, MODULE=8, 
		MUTABLE=9, STRUCT=10, RPAR=11, LPAR=12, COMMA=13, TYPE=14, ABSTRACT=15, 
		PRIMITIVE=16, BUILTIN=17, EXTEND=18, BinaryOrAssignableOp=19, Name=20, 
		Termination=21, NewLine=22, Whitespace=23, BlockComment=24, LineComment=25;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"QUOTE", "BEGIN", "DIGIT", "COND", "DOT", "END", "BAREMODULE", "MODULE", 
		"MUTABLE", "STRUCT", "RPAR", "LPAR", "COMMA", "TYPE", "ABSTRACT", "PRIMITIVE", 
		"BUILTIN", "EXTEND", "BinaryOrAssignableOp", "IdentifierPrefixCharacter", 
		"IdentifierSuffixCharacter", "Name", "Termination", "NewLine", "Whitespace", 
		"BlockComment", "LineComment"
	};


	public SpinorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SpinorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'quote'", "'begin'", null, "'?'", "'.'", "'end'", "'baremodule'", 
		"'module'", "'mutable'", "'struct'", "'('", "')'", "','", "'type'", "'abstract'", 
		"'primitive'", "'abstractbuiltin'", "'<:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "QUOTE", "BEGIN", "DIGIT", "COND", "DOT", "END", "BAREMODULE", "MODULE", 
		"MUTABLE", "STRUCT", "RPAR", "LPAR", "COMMA", "TYPE", "ABSTRACT", "PRIMITIVE", 
		"BUILTIN", "EXTEND", "BinaryOrAssignableOp", "Name", "Termination", "NewLine", 
		"Whitespace", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpinorLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpinorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 5 : END_action(_localctx, actionIndex); break;
		case 14 : ABSTRACT_action(_localctx, actionIndex); break;
		case 15 : PRIMITIVE_action(_localctx, actionIndex); break;
		case 16 : BUILTIN_action(_localctx, actionIndex); break;
		}
	}
	private void END_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: BinaryOpPossible = true; break;
		}
	}
	private void ABSTRACT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: BinaryOpPossible = false; break;
		}
	}
	private void PRIMITIVE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: BinaryOpPossible = false; break;
		}
	}
	private void BUILTIN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: BinaryOpPossible = false; break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18 : return BinaryOrAssignableOp_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool BinaryOrAssignableOp_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IsBinaryOrAssignableOp();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,25,227,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,
		1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
		1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,5,21,177,8,21,10,21,12,21,180,
		9,21,1,22,1,22,4,22,184,8,22,11,22,12,22,185,1,22,3,22,189,8,22,1,23,1,
		23,3,23,193,8,23,1,23,3,23,196,8,23,1,24,4,24,199,8,24,11,24,12,24,200,
		1,24,1,24,1,25,1,25,1,25,1,25,5,25,209,8,25,10,25,12,25,212,9,25,1,25,
		1,25,1,25,1,25,1,25,1,26,1,26,5,26,221,8,26,10,26,12,26,224,9,26,1,26,
		1,26,1,210,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,0,41,0,43,20,45,21,47,
		22,49,23,51,24,53,25,1,0,5,1,0,48,57,4,0,33,33,65,90,95,95,97,122,5,0,
		33,33,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,233,0,1,1,
		0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,61,1,0,0,0,5,67,1,0,0,0,7,69,
		1,0,0,0,9,71,1,0,0,0,11,73,1,0,0,0,13,79,1,0,0,0,15,90,1,0,0,0,17,97,1,
		0,0,0,19,105,1,0,0,0,21,112,1,0,0,0,23,114,1,0,0,0,25,116,1,0,0,0,27,118,
		1,0,0,0,29,123,1,0,0,0,31,134,1,0,0,0,33,146,1,0,0,0,35,164,1,0,0,0,37,
		167,1,0,0,0,39,170,1,0,0,0,41,172,1,0,0,0,43,174,1,0,0,0,45,188,1,0,0,
		0,47,195,1,0,0,0,49,198,1,0,0,0,51,204,1,0,0,0,53,218,1,0,0,0,55,56,5,
		113,0,0,56,57,5,117,0,0,57,58,5,111,0,0,58,59,5,116,0,0,59,60,5,101,0,
		0,60,2,1,0,0,0,61,62,5,98,0,0,62,63,5,101,0,0,63,64,5,103,0,0,64,65,5,
		105,0,0,65,66,5,110,0,0,66,4,1,0,0,0,67,68,7,0,0,0,68,6,1,0,0,0,69,70,
		5,63,0,0,70,8,1,0,0,0,71,72,5,46,0,0,72,10,1,0,0,0,73,74,5,101,0,0,74,
		75,5,110,0,0,75,76,5,100,0,0,76,77,1,0,0,0,77,78,6,5,0,0,78,12,1,0,0,0,
		79,80,5,98,0,0,80,81,5,97,0,0,81,82,5,114,0,0,82,83,5,101,0,0,83,84,5,
		109,0,0,84,85,5,111,0,0,85,86,5,100,0,0,86,87,5,117,0,0,87,88,5,108,0,
		0,88,89,5,101,0,0,89,14,1,0,0,0,90,91,5,109,0,0,91,92,5,111,0,0,92,93,
		5,100,0,0,93,94,5,117,0,0,94,95,5,108,0,0,95,96,5,101,0,0,96,16,1,0,0,
		0,97,98,5,109,0,0,98,99,5,117,0,0,99,100,5,116,0,0,100,101,5,97,0,0,101,
		102,5,98,0,0,102,103,5,108,0,0,103,104,5,101,0,0,104,18,1,0,0,0,105,106,
		5,115,0,0,106,107,5,116,0,0,107,108,5,114,0,0,108,109,5,117,0,0,109,110,
		5,99,0,0,110,111,5,116,0,0,111,20,1,0,0,0,112,113,5,40,0,0,113,22,1,0,
		0,0,114,115,5,41,0,0,115,24,1,0,0,0,116,117,5,44,0,0,117,26,1,0,0,0,118,
		119,5,116,0,0,119,120,5,121,0,0,120,121,5,112,0,0,121,122,5,101,0,0,122,
		28,1,0,0,0,123,124,5,97,0,0,124,125,5,98,0,0,125,126,5,115,0,0,126,127,
		5,116,0,0,127,128,5,114,0,0,128,129,5,97,0,0,129,130,5,99,0,0,130,131,
		5,116,0,0,131,132,1,0,0,0,132,133,6,14,1,0,133,30,1,0,0,0,134,135,5,112,
		0,0,135,136,5,114,0,0,136,137,5,105,0,0,137,138,5,109,0,0,138,139,5,105,
		0,0,139,140,5,116,0,0,140,141,5,105,0,0,141,142,5,118,0,0,142,143,5,101,
		0,0,143,144,1,0,0,0,144,145,6,15,2,0,145,32,1,0,0,0,146,147,5,97,0,0,147,
		148,5,98,0,0,148,149,5,115,0,0,149,150,5,116,0,0,150,151,5,114,0,0,151,
		152,5,97,0,0,152,153,5,99,0,0,153,154,5,116,0,0,154,155,5,98,0,0,155,156,
		5,117,0,0,156,157,5,105,0,0,157,158,5,108,0,0,158,159,5,116,0,0,159,160,
		5,105,0,0,160,161,5,110,0,0,161,162,1,0,0,0,162,163,6,16,3,0,163,34,1,
		0,0,0,164,165,5,60,0,0,165,166,5,58,0,0,166,36,1,0,0,0,167,168,4,18,0,
		0,168,169,9,0,0,0,169,38,1,0,0,0,170,171,7,1,0,0,171,40,1,0,0,0,172,173,
		7,2,0,0,173,42,1,0,0,0,174,178,3,39,19,0,175,177,3,41,20,0,176,175,1,0,
		0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,44,1,0,0,0,180,
		178,1,0,0,0,181,184,3,47,23,0,182,184,5,59,0,0,183,181,1,0,0,0,183,182,
		1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,189,1,0,0,
		0,187,189,5,0,0,1,188,183,1,0,0,0,188,187,1,0,0,0,189,46,1,0,0,0,190,192,
		5,13,0,0,191,193,5,10,0,0,192,191,1,0,0,0,192,193,1,0,0,0,193,196,1,0,
		0,0,194,196,5,10,0,0,195,190,1,0,0,0,195,194,1,0,0,0,196,48,1,0,0,0,197,
		199,7,3,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,
		0,0,0,201,202,1,0,0,0,202,203,6,24,4,0,203,50,1,0,0,0,204,205,5,35,0,0,
		205,206,5,61,0,0,206,210,1,0,0,0,207,209,9,0,0,0,208,207,1,0,0,0,209,212,
		1,0,0,0,210,211,1,0,0,0,210,208,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,
		0,213,214,5,61,0,0,214,215,5,35,0,0,215,216,1,0,0,0,216,217,6,25,4,0,217,
		52,1,0,0,0,218,222,5,35,0,0,219,221,8,4,0,0,220,219,1,0,0,0,221,224,1,
		0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,
		225,226,6,26,4,0,226,54,1,0,0,0,10,0,178,183,185,188,192,195,200,210,222,
		5,1,5,0,1,14,1,1,15,2,1,16,3,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HyperSphere
